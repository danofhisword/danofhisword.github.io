<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shippity, ship, ship some code</title>
    <description>Some ramblings about code, architecture, teams and other stuff. Hopefully they help someone... opinions are my own. Play nice, be kind.
</description>
    <link>http://danofhisword.com/</link>
    <atom:link href="http://danofhisword.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 12 Jan 2015 15:16:28 +1000</pubDate>
    <lastBuildDate>Mon, 12 Jan 2015 15:16:28 +1000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Talking About Quality?</title>
        <description>&lt;p&gt;Over the last 12 months I’ve been thinking about “quality” a lot and what it means in lean and agile teams.&lt;/p&gt;

&lt;p&gt;The thing is, quality means different things to different people;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’re thinking “product” or lean startup, quality might be a factor of &lt;i&gt;“features users love and not wasting time building stuff no-one wants”&lt;/i&gt;.
If you’re code focused, quality might be be a factor of &lt;i&gt;“being able to sustainably deliver working software at a rapid rate”&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Nobody wants to fall into failure demand fixing up nasty code or dud features all the time … you can decide what quality means to you.&lt;/p&gt;

&lt;p&gt;My experience is, expecially where culture is still maturing, miss-alignment can lead to people, product and technical problems.&lt;/p&gt;

&lt;p&gt;The neat thing is, smart people who care and talk (and listen!) about quality find a shared understanding quickly. 
Even better, if handled the right way, quality values become culture.&lt;/p&gt;

&lt;p&gt;One of the actions I’ve been introducing to new teams (as they form) is a “Quality Values” discussion. 
During Iteration Zero we take a moment to talk about what the team believes is quality and the things we value.
I say “values” and not “standards”, “rules” and “process” … rules were meant to be broken right? :)&lt;/p&gt;

&lt;p&gt;We then take discussion outcomes and use practices which support our values.
As an ongoing checkpoint we revist the values in retros, to check if the our values or practices need realignment.&lt;br /&gt;
Taking an hour to workshop at the start and 5 minutes in retros can pay back many times over.
Once the practices become culture we often don’t even need to revisit anymore.&lt;/p&gt;

&lt;h2&gt;In Practice &lt;/h2&gt;

&lt;p&gt;I’ve experienced a team agree that commit test automation was a big Quality Value for them (helping code design quality).
The team revisited it at first retro and found it was low (and the code design reflected that).&lt;/p&gt;

&lt;p&gt;Everyone agreed the Quality Value was still important, and took steps to adjust practices and test coverage was almost 100% next retro and refactored code design quality was higher.We adjusted our practices and that became part of our team culture. Test automation continued to remain high, it was just a given and it worked for us. &lt;/p&gt;

&lt;p&gt;The rapid ability to change the codebase due to the design quality was the commercial payback of the Quality Values. &lt;/p&gt;

&lt;h2&gt;How to Get There - Workshop It!&lt;/h2&gt;

&lt;p&gt;Is quality even a priority? Decide that first. 
All “stakeholders” in the project/team/product should agree if it is a priority. 
That should include the folk who are paying the bills and will own the product etc. &lt;/p&gt;

&lt;p&gt;A set of Success Sliders can help here… I find that when it’s made visible, few people put Quality down the bottom, unless there is &lt;u&gt;purposeful reason&lt;/u&gt; to do so. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/SuccessSliders.png&quot; height=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;{image borrowed from &lt;a href=&quot;http://www.slideshare.net/smithcdau/the-speed-to-cool-agile-testing-building-quality-in-39135501&quot;&gt;Craig Smith’s The Speed to Cool: Agile Testing &amp;amp; Building Quality In&lt;/a&gt;}&lt;/p&gt;

&lt;p&gt;Next, share your values … what do you mean when you put quality up the top?&lt;/p&gt;

&lt;p&gt;Anyone that knows me knows I’m big on physical sticky notes! 
They are real, fun and fast (it parrallelizes the process of getting everyones ideas).&lt;/p&gt;

&lt;p&gt;So maybe start off with a question; &lt;i&gt;“so we agree quality is priority. What do you believe is quality and what do you think it achieves”&lt;/i&gt;.
Then have people busy themselves in a timebox sticking notes on the wall.
Then someone can organizes the notes into themes or common groupings. 
Just talk them through, agree, disagree, debate, talk, listen, come out with a manageable set of ideas that represents your values. &lt;/p&gt;

&lt;p&gt;You can then do something as simple as keep these on your team space wall, nice and visible and tick vote them in retro if going poorly.
Or if you like the electronic ways (which I don’t), add them in your wiki or some list you can revisit.&lt;/p&gt;

&lt;p&gt;Put them on the wall, allow people to talk about your Quality Values, let people know your values (especially new team members).
Keep practicing your values, adapt your values if you need. &lt;/p&gt;

&lt;p&gt;Some of the stuff that’s come up for my teams includes more technical things like: &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;We&#39;ll make sure keeping builds green is a priority&lt;/li&gt;
    &lt;li&gt;We&#39;ll keep things simple, simplest thing that works&lt;/li&gt;
    &lt;li&gt;We&#39;ll make sure our product failing doesn&#39;t cause others to fail&lt;/li&gt;
    &lt;li&gt;We&#39;ll make sure our product performs under load&lt;/li&gt;
    &lt;li&gt;We&#39;ll automate as much acceptance testing as we can&lt;/li&gt;
    &lt;li&gt;We&#39;ll embrace refactoring our code when it&#39;s valuable&lt;/li&gt;
    &lt;li&gt;We&#39;ll ship small batches often&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and people things like: &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;We&#39;ll actively engage with others when we need guidance&lt;/li&gt;
    &lt;li&gt;We&#39;ll show empathy to those who follow us, with monitoring and alerting, correct logging/exception handling and supporting materials&lt;/li&gt;
    &lt;li&gt;We&#39;ll actively leverage pairing and &quot;over the shoulder&quot; review with peers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and product things like:  &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;We&#39;ll make sure our product works across browsers X, Y and Z&lt;/li&gt;
    &lt;li&gt;We&#39;ll make sure our UI&#39;s are intuitive and simple for users&lt;/li&gt;
    &lt;li&gt;We&#39;ll test and use data to make decisions about what&#39;s important to users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve found a list of 15-20 still manageable on a working basis, or distil it back to a smaller set of values to focus on at any time as the team matures. 
Communicate them at a high level even, maybe you believe in “Technical Quality, People Quality, Product Quality” … whatever works, &lt;b&gt;the discussion is the important bit&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Some values may be more specific, some may be pretty abstract.
I don’t think it matters, as long as you all understand what you mean and it’s making things better.
Is unit testing your value, or is the code design quality your value… whatever, make it better, move on.&lt;/p&gt;

&lt;p&gt;So that’s my experience in one practice which has helped team quality. &lt;/p&gt;

&lt;p&gt;I’d love to hear about what others are doing to support quality in what they do, and whether you’ve tried similar practices. Did they help or hinder your team? &lt;/p&gt;

&lt;p&gt;Jokes about the quality of my writing or spelling will be deleted ;)&lt;/p&gt;

</description>
        <pubDate>Fri, 09 Jan 2015 00:30:00 +1000</pubDate>
        <link>http://danofhisword.com/agile/lean/team/culture/quality/2015/01/09/talking-about-quality.html</link>
        <guid isPermaLink="true">http://danofhisword.com/agile/lean/team/culture/quality/2015/01/09/talking-about-quality.html</guid>
        
        
        <category>agile</category>
        
        <category>lean</category>
        
        <category>team</category>
        
        <category>culture</category>
        
        <category>quality</category>
        
      </item>
    
      <item>
        <title>Microservice Testing Links</title>
        <description>&lt;p&gt;Some general links and references for microservices testing I found interesting or useful, I’ll add to these as I find more …  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.goodreads.com/book/show/8686650-continuous-delivery&quot;&gt;Continuous Delivery book - Humble/Farley&lt;/a&gt; … go read it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/articles/microservice-testing/&quot;&gt;Toby Clemson - Testing Strategies in a Microservice Architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://techblog.realestate.com.au/testing-interactions-with-web-services-without-integration-tests-in-ruby/&quot;&gt;REA - Testing interactions with web services without integration tests in Ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vimeo.com/80533536&quot;&gt;J.B. Rainsberger - Video, Integrated Tests Are A Scam&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pact&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/realestate-com-au/pact&quot;&gt;pact&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dius.com.au/2014/05/19/simplifying-micro-service-testing-with-pacts/&quot;&gt;Simplifying Micro Service Testing With Pacts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DiUS/pact-jvm&quot;&gt;pact-jvm&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://swagger.io/&quot;&gt;swagger&lt;/a&gt; .. handy for exploratory testing your api &lt;/p&gt;

&lt;p&gt;Test Doubles&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiremock.org&quot;&gt;Wiremock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;VCR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/bliki/SelfInitializingFake.html&quot;&gt;Self Initializing Fakes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/subethasmtp/wiki/Wiser&quot;&gt;Wiser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://robohydra.org/&quot;&gt;robohydra&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qafoo.com/blog/071_testing_micro_services.html&quot;&gt;QAFoo Testing Micro Services&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Dec 2014 18:03:00 +1000</pubDate>
        <link>http://danofhisword.com/test/dev/microservices/2014/12/02/microservices-testing-links.html</link>
        <guid isPermaLink="true">http://danofhisword.com/test/dev/microservices/2014/12/02/microservices-testing-links.html</guid>
        
        
        <category>test</category>
        
        <category>dev</category>
        
        <category>microservices</category>
        
      </item>
    
      <item>
        <title>Sharing and Isolating Steps and State in Cucumber JVM and Groovy</title>
        <description>&lt;p&gt;I’ve been doing a bunch of BDD acceptance tests and automation lately, having some wins and losses and learning new stuff as I go. 
Whilst enjoying working with Cucumber, I had a bit of challenge with sharing and issolation.&lt;/p&gt;

&lt;p&gt;I’m not sure I like the solution I arrived at, I need to use it in anger more to see that for myself. 
It’s a bit complex and I still don’t like the global-ness of the world stuff, could be evolved somewhat. 
I hope it at least gives some ideas to others or helps someone come up with something more elegant!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The problem …&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I was writing a bunch of scenarios for Features and wanted to re-use Steps and related code across various Features.&lt;/p&gt;

&lt;p&gt;I was hoping to make it quicker to compose new Scenarios, quicker to modify and maintain by drying up my code a bit.
Cucumber and Groovy can be a bit challenging, the way step files are compiled and the scope of variables between them seemed to cause me the challenges.&lt;/p&gt;

&lt;p&gt;I also desired to encapsulate some state and operations so they are not shared, to avoid wierd global state side-effects impacting Scenarios. &lt;/p&gt;

&lt;p&gt;My general desire was:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A JUnit runnable which ran my Features based on a Annotation (e.g. @AcceptanceTest).&lt;/li&gt;
    &lt;li&gt;Many features, multiple Feature files (one per Feature), multiple Scenarios within the Feature.&lt;/li&gt;
	&lt;li&gt;A dedicated Step file for a Feature, which also contains state for the Features Scenarios.&lt;/li&gt;
	&lt;li&gt;A shared Step file and class for the bits I wanted to re-use across Features.&lt;/li&gt;
	&lt;li&gt;Independence of tests, state not carried over between scenarios.&lt;/li&gt;
	&lt;li&gt;Not too complex/abstract to understand (not sure I got there). Clear hierarchy, not spaghetti.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/CucumberSharing.gif&quot; height=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the pains I seemed to encounter:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;You can&#39;t see variables defined in one step file in another step file&lt;/li&gt;
	&lt;li&gt;You can&#39;t see variables in global scope (or world scope) within any classes within step files&lt;/li&gt;
	&lt;li&gt;Can&#39;t have steps with the same &quot;phrase&quot; in multiple feature files, they clash at runtime&lt;/li&gt;
	&lt;li&gt;Even using glue to try and separate steps with separate JUnit runnable tests, it seems Cucumber will still by convention find your other steps and they clash&lt;/li&gt;
	&lt;li&gt;Mix-ins seem useful, but seem to get themselves in a pickle when running in cucumber, things getting defined in scope you wouldn&#39;t expect and lazy re-initialising when you don&#39;t expect&lt;/li&gt;
	&lt;li&gt;World can only be defined once, you can&#39;t redefine it or add to it easily&lt;/li&gt;
	&lt;li&gt;I even got in a weird state where the one Step file was being compiled (I think) twice, saying Steps were duplicates of themselves... that was fun.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Where I’m at so far … &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I used a combination of World() and Feature specific “State” classes in Step files.&lt;/p&gt;

&lt;p&gt;I defined the World once, but I use @Before hooks to refresh the World properties in place.&lt;/p&gt;

&lt;p&gt;Note, I also pass the world reference in (delegate) when I create the step state, so I can use properties from the world internally or delegate to it.
This was kind of the discovery for me that led to the pattern I have now for better or worse. &lt;/p&gt;

&lt;p&gt;Here’s an example shared steps file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// By delegating World to SharedWorld, we can see it in other step files&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SharedWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SharedWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MySharedProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedProperty&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Some shared functions I want to call elsewhere&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mySharedMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(~&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checks$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Cool, I can see this stuff, it&amp;#39;s in World scope, I&amp;#39;ll use it&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mySharedMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is an example feature steps:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;MyFeatureTestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;featureTestState&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@MyFeature&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Re-initialise the state before the test&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Maybe I should re-init the world here too? &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;featureTestState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyFeatureTestState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// delegate is shared world delegate&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFeatureTestState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Pass in the world, so we can reference values from world scope in here&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;MyFeatureTestState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;MyFeatureProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFeatureProperty&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myFeatureMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// So you can access world values in here now&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharedProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myFeatureProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(~&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step$&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// So I can access my feature state here by name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;featureTestState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myFeatureMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;featureTestState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myFeatureProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// I can also access my shared state as the World&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And a feature: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@MyFeature&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Feature:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Scenario:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Made&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checks&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specific&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;UPDATE&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Someone also mentioned to me the use of the Groovy &lt;a href=&quot;http://groovy.codehaus.org/gapi/groovy/transform/Field.html&quot;&gt;@Field&lt;/a&gt; annotation on your global fields, so you could see them in other step files. &lt;/p&gt;

&lt;p&gt;Probably something to use at your discretion w.r.t global state.&lt;/p&gt;

&lt;p&gt;I need to play with it some more, could be a much simpler solution than what I have above for sharing!   &lt;/p&gt;

&lt;p&gt;In shared script:&lt;/p&gt;

&lt;p&gt;@Field
SomeObject myObject&lt;/p&gt;

&lt;p&gt;In other Groovy scripts:&lt;/p&gt;

&lt;p&gt;myObject.doSomething()&lt;/p&gt;

</description>
        <pubDate>Wed, 19 Nov 2014 02:45:00 +1000</pubDate>
        <link>http://danofhisword.com/test/dev/cucumber/bdd/2014/11/19/cucumber-groovy-sharing-steps.html</link>
        <guid isPermaLink="true">http://danofhisword.com/test/dev/cucumber/bdd/2014/11/19/cucumber-groovy-sharing-steps.html</guid>
        
        
        <category>test</category>
        
        <category>dev</category>
        
        <category>cucumber</category>
        
        <category>bdd</category>
        
      </item>
    
      <item>
        <title>DropwizardAppRule, Wiremock and GZIP</title>
        <description>&lt;p&gt;I had a bit of challenge when using WireMock to do some stubbed testing in my DropWizard app. &lt;/p&gt;

&lt;p&gt;This was because wiremock didn’t support GZIP and the Jersey client had it on by default.
I found my requests weren’t matching up when using .withRequestBody()…&lt;/p&gt;

&lt;p&gt;The result being the same as described &lt;a href=&quot;https://github.com/tomakehurst/wiremock/issues/106&quot;&gt;here&lt;/a&gt;, “com.github.tomakehurst.wiremock.common.Log4jNotifier: URL /foobar is match, but body is not”&lt;/p&gt;

&lt;p&gt;I got around this in my test by having the stubbed test run without GZIP on the default DropWizard Jersey Client
As I was using a DropwizardAppRule, I used config override as below … &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ConfigOverride&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;defaultHttpClient.gzipEnabled&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ConfigOverride&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;defaultHttpClient.gzipEnabledForRequests&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see my post on &lt;a href=&quot;http://danofhisword.com/dev/dropwizard/2014/09/25/dropwizard-testing-config-overrides.html&quot;&gt;Config Overrides&lt;/a&gt; for more info on using overrides in general. &lt;/p&gt;

</description>
        <pubDate>Wed, 05 Nov 2014 01:20:00 +1000</pubDate>
        <link>http://danofhisword.com/test/dev/dropwizard/2014/11/05/dropwizard-gzip-wiremock.html</link>
        <guid isPermaLink="true">http://danofhisword.com/test/dev/dropwizard/2014/11/05/dropwizard-gzip-wiremock.html</guid>
        
        
        <category>test</category>
        
        <category>dev</category>
        
        <category>dropwizard</category>
        
      </item>
    
      <item>
        <title>Dropwizard Integrated Testing and ConfigOverride</title>
        <description>&lt;p&gt;Dropwizard supports integrated testing of via &lt;a href=&quot;http://dropwizard.io/manual/testing.html#integrated-testing&quot;&gt;DropwizardAppRule&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you spin up the app, you might want to use your default config.yml file and just override some of the values, specific for your test scenario. &lt;/p&gt;

&lt;p&gt;You can use DropwizardAppRule and &lt;a href=&quot;https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ConfigOverride.java&quot;&gt;io.dropwizard.testing.junit.ConfigOverride&lt;/a&gt; to achieve this. &lt;/p&gt;

&lt;p&gt;Say you have a config yml like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nl&quot;&gt;server:&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;applicationConnectors:&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;481&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;adminConnectors:&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
         &lt;span class=&quot;nl&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;482&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;someother:&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;magicConfig:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somevalue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can overide some of the configs like following, where I use a base config.yml file, then override a port and set another config value: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ClassRule&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DropwizardAppRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YourConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RULE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DropwizardAppRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YourService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/path/to/your/config.yml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ConfigOverride&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;server.applicationConnectors[0].port&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;443&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;           
                    &lt;span class=&quot;n&quot;&gt;ConfigOverride&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;someother.magicConfig&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;someothervalue&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You’ll note that some config nodes are collections (like server.applicationConnectors above), and you have to index reference them… &lt;/p&gt;

&lt;p&gt;I didn’t find a good way to figure this out, other than using my debugger and seeing what was and wasn’t a collection as the DropwizardAppRule started up. 
There’s probably a sensible reason here for what is or isn’t a collection, but I didn’t think that hard about it :) &lt;/p&gt;

&lt;p&gt;Anyways, I couldn’t find much info online about using ConfigOverides, so after a bit of source code digging this was what I came up with, hope it helps!&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Sep 2014 03:06:35 +1000</pubDate>
        <link>http://danofhisword.com/dev/dropwizard/2014/09/26/dropwizard-testing-config-overrides.html</link>
        <guid isPermaLink="true">http://danofhisword.com/dev/dropwizard/2014/09/26/dropwizard-testing-config-overrides.html</guid>
        
        
        <category>dev</category>
        
        <category>dropwizard</category>
        
      </item>
    
      <item>
        <title>Dropwizard Validation and ResourceTestRule - javax.validation.ConstraintViolationException</title>
        <description>&lt;p&gt;Dropwizard support testing of Resources via &lt;a href=&quot;http://dropwizard.io/manual/testing.html#testing-resources&quot;&gt;ResourceTestRules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re using Dropwizard &lt;a href=&quot;http://dropwizard.io/manual/core.html#validation&quot;&gt;Validation&lt;/a&gt; and you want to test the 422 responses and error messages using ResourceTestRule, you might try something like …&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// setup you ResourceTestRule&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ClassRule&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceTestRule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceTestRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestWebResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;           
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ... and in your actual test you might do &lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/test/something&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someInvalidRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
  &lt;span class=&quot;c1&quot;&gt;// Expecting a 422 ... &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But instead you might get a RuntimeException something like… &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ContainerResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throwing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ConstraintViolationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;had&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;errors:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dropwizard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jackson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;JacksonMessageBodyProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JacksonMessageBodyProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropwizard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The trick is you, you need to wire up a provider to handle the Exception as per Dropwizard’s normal pipeline.&lt;/p&gt;

&lt;p&gt;You can do that as follows, adding the ConstraintViolationExceptionMapper using “addProvider”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ClassRule&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceTestRule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceTestRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestWebResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstraintViolationExceptionMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you should see your normal 422 responses and error messages come out when using ResourceTestRule! &lt;/p&gt;

</description>
        <pubDate>Fri, 26 Sep 2014 03:06:35 +1000</pubDate>
        <link>http://danofhisword.com/dev/dropwizard/2014/09/26/dropwizard-test-rule-validation.html</link>
        <guid isPermaLink="true">http://danofhisword.com/dev/dropwizard/2014/09/26/dropwizard-test-rule-validation.html</guid>
        
        
        <category>dev</category>
        
        <category>dropwizard</category>
        
      </item>
    
      <item>
        <title>Going Manual on Dropwizard Validation</title>
        <description>&lt;p&gt;Dropwizard resources support some great declarative &lt;a href=&quot;http://dropwizard.io/manual/core.html#validation&quot;&gt;validation&lt;/a&gt; with the @Valid annotation. &lt;/p&gt;

&lt;p&gt;However, Dropwizard does marshall the errors out to a response object for you and hides some of the underlying details whilst also string formatting a little.
See &lt;a href=&quot;https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapper.java&quot;&gt;ConstraintViolationExceptionMapper&lt;/a&gt; and &lt;a href=&quot;https://github.com/dropwizard/dropwizard/blob/2655ac703a0f6ddb4eae933a74dae3d12fde287f/dropwizard-validation/src/main/java/io/dropwizard/validation/ConstraintViolations.java&quot;&gt;ConstraintViolations&lt;/a&gt; format method.&lt;/p&gt;

&lt;p&gt;If the default Dropwizard behaviour meets your needs (often the case) you can stop reading now!&lt;/p&gt;

&lt;p&gt;For my scenario, I wanted to keep the nice declaritive validation, but get a bit more insight into the error and also control of the response. &lt;/p&gt;

&lt;p&gt;A sample of triggering validation manually is below … (you should probably inject the ValidatorFactory etc into where you need it).&lt;/p&gt;

&lt;p&gt;Jump into your debugger and inspect the violations objects returned … of interest is usually the properties that violated, and their associated messages. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ValidatorFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	
        &lt;span class=&quot;n&quot;&gt;Validator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstraintViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeObjectToValidateType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;violations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someInstanceToValidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;violations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can usually build on that to create a custom response as you need, either manually rolling a Response object or by creating exceptions and plumbing that into the response pipeline with some &lt;a href=&quot;https://dropwizard.github.io/dropwizard/manual/core.html#error-handling&quot;&gt;error handling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like with anything, if you decide to go it alone, instead of using the standard built in Dropwizard functionality, make sure you have a good reason!&lt;/p&gt;

</description>
        <pubDate>Fri, 19 Sep 2014 03:06:35 +1000</pubDate>
        <link>http://danofhisword.com/dev/dropwizard/2014/09/19/manually-dropwizard-validation.html</link>
        <guid isPermaLink="true">http://danofhisword.com/dev/dropwizard/2014/09/19/manually-dropwizard-validation.html</guid>
        
        
        <category>dev</category>
        
        <category>dropwizard</category>
        
      </item>
    
  </channel>
</rss>
